/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useMemo, createContext } from 'react';
import { useGLTF, Merged } from '@react-three/drei';
import { VRTemplate } from '../../../assets';

export const context = createContext();

export function Instances({ children, ...props }) {
  const { nodes } = useGLTF(VRTemplate);
  const instances = useMemo(
    () => ({
      WallParkCorner: nodes.WallParkCorner01,
      ArrowSmall: nodes.ArrowSmall,
      LightPointlight: nodes.LightPointlight,
      LightSpotlight: nodes.LightSpotlight,
      Player: nodes.Player,
      SelectionRing: nodes.SelectionRing,
      Dart: nodes.Dart,
      DartBoard: nodes.DartBoard,
      SwitchButton: nodes.SwitchButton01,
      SwitchButtonButton: nodes.SwitchButtonButton01,
      SwitchButton1: nodes.SwitchButton02,
      SwitchButtonButton1: nodes.SwitchButtonButton02,
      SwitchLever: nodes.SwitchLever01,
      SwitchLeverStick: nodes.SwitchLeverStick01,
      SwitchLever1: nodes.SwitchLever02,
      SwitchLeverStick1: nodes.SwitchLeverStick02,
      SwitchRemote: nodes.SwitchRemote,
      SwitchRemoteButton: nodes.SwitchRemoteButton01,
      Fence: nodes.Fence01,
      Fence1: nodes.Fence02,
      Gate: nodes.Gate01,
      FencePost: nodes.FencePost,
      Bush: nodes.Bush01,
      Bush1: nodes.Bush02,
      Cloud: nodes.Cloud01,
      Cloud1: nodes.Cloud02,
      Cloud2: nodes.Cloud03,
      RiverStone: nodes.RiverStone,
      Rock: nodes.Rock01,
      Rock1: nodes.Rock02,
      Rock2: nodes.Rock03,
      Rock3: nodes.Rock04,
      Tree: nodes.Tree01,
      Tree1: nodes.Tree02,
      Tree2: nodes.Tree03,
      Tree3: nodes.Tree04,
      Tree4: nodes.Tree05,
      Tree5: nodes.Tree06,
      Tree6: nodes.Tree07,
      Tree7: nodes.Tree08,
      TreeBirch: nodes.TreeBirch,
      Grass: nodes.Grass,
      Pipe: nodes.Pipe,
      PipeWater: nodes.PipeWater,
      PipeWaterExtend: nodes.PipeWaterExtend01,
      Pool: nodes.Pool,
      WallParkCorner1: nodes.WallParkCorner02,
      WallParkStraight: nodes.WallParkStraight01,
      Ground: nodes.Ground,
      FloatingIsland: nodes.FloatingIsland,
      Grass1: nodes.Grass01,
      Grass2: nodes.Grass02,
      PathGrass: nodes.PathGrass02,
      PathGrass1: nodes.PathGrass03,
      RoadConcrete: nodes.RoadConcrete01,
      RoadConcrete1: nodes.RoadConcrete02,
      RoadConcrete2: nodes.RoadConcrete03,
      RoadConcrete3: nodes.RoadConcrete04,
      RoadConcrete4: nodes.RoadConcrete05,
      RoadGrass: nodes.RoadGrass02,
      RoadGrass1: nodes.RoadGrass03,
      RoadGrass2: nodes.RoadGrass04,
      RoadGrass3: nodes.RoadGrass05,
      RoadGrass4: nodes.RoadGrass06,
      RoadGrass5: nodes.RoadGrass07,
      RoadGrass6: nodes.RoadGrass08,
      Water: nodes.Water,
      Apartments: nodes.Apartments01,
      Apartments1: nodes.Apartments02,
      Apartments2: nodes.Apartments03,
      Apartments3: nodes.Apartments04,
      ApartmentsBlock: nodes.ApartmentsBlock01,
      ApartmentsBlock1: nodes.ApartmentsBlock02,
      Church: nodes.Church,
      CityHall: nodes.CityHall,
      House: nodes.House01,
      House1: nodes.House02,
      House2: nodes.House03,
      House3: nodes.House04,
      House4: nodes.House05,
      House5: nodes.House06,
      House6: nodes.House07,
      House7: nodes.House08,
      House8: nodes.House09,
      House9: nodes.House10,
      House10: nodes.House11,
      OfficeOctagon: nodes.OfficeOctagon,
      OfficeOldLarge: nodes.OfficeOldLarge,
      OfficeOldSmall: nodes.OfficeOldSmall,
      Shop: nodes.Shop01,
      Shop1: nodes.Shop02,
      Shop2: nodes.Shop03,
      Station: nodes.Station01,
      Station1: nodes.Station02,
    }),
    [nodes]
  );
  return (
    <Merged meshes={instances} {...props}>
      {(instances) => (
        <context.Provider value={instances} children={children} />
      )}
    </Merged>
  );
}

useGLTF.preload(VRTemplate);
